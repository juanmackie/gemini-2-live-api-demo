/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
*/
declare const vs = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n  varying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nuniform float time;\n\nuniform vec4 inputData;\nuniform vec4 outputData;\n\nvec3 calc( vec3 pos ) {\n\n  vec3 dir = normalize( pos );\n  vec3 p = dir + vec3( time, 0., 0. );\n  return pos +\n    1. * inputData.x * inputData.y * dir * (.5 + .5 * sin(inputData.z * pos.x + time)) +\n    1. * outputData.x * outputData.y * dir * (.5 + .5 * sin(outputData.z * pos.y + time))\n  ;\n}\n\nvec3 spherical( float r, float theta, float phi ) {\n  return r * vec3(\n    cos( theta ) * cos( phi ),\n    sin( theta ) * cos( phi ),\n    sin( phi )\n  );\n}\n\nvoid main() {\n  #include <uv_vertex>\n  #include <color_vertex>\n  #include <morphinstance_vertex>\n  #include <morphcolor_vertex>\n  #include <batching_vertex>\n  #include <beginnormal_vertex>\n  #include <morphnormal_vertex>\n  #include <skinbase_vertex>\n  #include <skinnormal_vertex>\n  #include <defaultnormal_vertex>\n  #include <normal_vertex>\n  #include <begin_vertex>\n\n  float inc = 0.001;\n\n  float r = length( position );\n  float theta = ( uv.x + 0.5 ) * 2. * PI;\n  float phi = -( uv.y + 0.5 ) * PI;\n\n  vec3 np = calc( spherical( r, theta, phi )  );\n\n  vec3 tangent = normalize( calc( spherical( r, theta + inc, phi ) ) - np );\n  vec3 bitangent = normalize( calc( spherical( r, theta, phi + inc ) ) - np );\n  transformedNormal = -normalMatrix * normalize( cross( tangent, bitangent ) );\n\n  vNormal = normalize( transformedNormal );\n\n  transformed = np;\n\n  #include <morphtarget_vertex>\n  #include <skinning_vertex>\n  #include <displacementmap_vertex>\n  #include <project_vertex>\n  #include <logdepthbuf_vertex>\n  #include <clipping_planes_vertex>\n  vViewPosition = - mvPosition.xyz;\n  #include <worldpos_vertex>\n  #include <shadowmap_vertex>\n  #include <fog_vertex>\n  #ifdef USE_TRANSMISSION\n    vWorldPosition = worldPosition.xyz;\n  #endif\n}";
export { vs };
//# sourceMappingURL=sphere-shader.d.ts.map